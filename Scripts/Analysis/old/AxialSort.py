#===============================================================================
# Script that does the best it can to identify single-particle states from MOCCa
# output, based on the value of <Jz>, which is an approximate quantum number.
#
#
#===============================================================================
import numpy as np
from tokenizer import tokenizer


def Sort(fname):
	#============================================================
	# STEP 1
	#   Read a table of spwfs generated by MOCCa.spectra.awk
	#   into an array of all of the spwfs
	tokens = tokenizer(fname)
    tokens.next() # Skip the first line
	spwfs  =[np.loadtxt(A) for A in tokens]
	#============================================================
	# STEP 2
	#   Find all of the points that can have their Jz identified
        #   without any question
	column = 9

	spwf = spwfs[0]
	nwt          = len(spwfs)
	deformations = range(len(spwf[:,0]))

	Prec = 10**-2

	K = np.zeros((nwt, len(deformations)))
	Jz= np.zeros((nwt, len(deformations)))
	E = np.zeros((nwt, len(deformations)))
	for i in range(nwt):
                spwf = spwfs[i]
		for j in deformations:
			TryK = 2 * spwf[j,column]
			# Leave the ambiguous cases undefined for now
			K[i,j]  = 0
			Jz[i,j] = spwf[j,column]
			E[i,j]  = spwf[j,6]
                        if(abs(TryK -1)  <= Prec) :
				K[i,j] = 1
                        if(abs(TryK +3)  <= Prec) :
				K[i,j] = 3
                        if(abs(TryK -5)  <= Prec) :
				K[i,j] = 5
                        if(abs(TryK +7)  <= Prec) :
				K[i,j] = 7
                        if(abs(TryK -9)  <= Prec) :
			 	K[i,j] = 9
                        if(abs(TryK+11)  <= Prec) :
				K[i,j] = 11
                        if(abs(TryK-13)  <= Prec) :
				K[i,j] = 13
	#==============================================================
	# STEP 3
	#   Assign the dubious points depending on the knowledge
    #   we have already from neighbouring points
	#
	# 	SUBSTEP 1
    #	   Look for already connected 'chains' of points
    #      If they seem robust, take them out of the mesh
	for K in range(1,KMAX):
	    for i in range(nwt):
		    for j in deformations:
		        
			
